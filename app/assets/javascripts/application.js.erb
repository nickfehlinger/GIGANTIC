// This is a manifest file that'll be compiled into application.js, which will include all the files
// listed below.
//
// Any JavaScript/Coffee file within this directory, lib/assets/javascripts, or any plugin's
// vendor/assets/javascripts directory can be referenced here using a relative path.
//
// It's not advisable to add code directly here, but if you do, it'll appear at the bottom of the
// compiled file. JavaScript code in this file should be added after the last require_* statement.
//
// Read Sprockets README (https://github.com/rails/sprockets#sprockets-directives) for details
// about supported directives.
//
//= require rails-ujs
//= require_tree .
//= require moment 
//= require fullcalendar
//= require bootstrap-datetimepicker

// $('#calendar').fullCalendar(
// 	{events: 'events.json'}
// );
// determine which month of the calendar we are looking at:
// document.addEventListener("DOMContentLoaded", function() {
// 	// initialize calendar
// $('#calendar').fullCalendar(
// 	{events: 'events.json'}
// 	);
// // define transactions
// var transactions;
// $.ajax({
// 	url: '/transactions.json',
// 	success: function(data) {
// 		transactions = data;
// 	}
// })
// // define budgets
// var budgets;
// $.ajax({
// 	url: '/budgets.json',
// 	success: function(data) {
// 		budgets = data;
// 	}
// })
// var view,
// 	start,
// 	end;
// App.getIdOrFilter = function () {
//     view = $('#calendar').fullCalendar('getView');
//     start = view.intervalStart;
//     end   = view.intervalEnd;
//     return function (e) {
//         // this is our event filter
//         if (e.start >= start && e.end <= end) {
//             // event e is within the view interval
//             return true;
//         }
//         // event e is not within the current displayed interval
//         return false;
//     };
// }
// $("#newEventBtn").click(function(){
// 	$("#newEvent").toggle(1000)
// });
	
// $(".fc-button").click(function(){
// 	updatePage()
// });

// function updatePage(){
// 	setTimeout( function(){
// 		var events = $('#calendar').fullCalendar('clientEvents', App.getIdOrFilter());
// 		var checks = []
// 		var currentTrans = transactions.filter(function (e) {
// 	        if (moment(e.created_at) >= start && moment(e.created_at) <= end) {
// 	            return true;
// 	        }
// 	        return false;
// 	    })
// 		var total = currentTrans.reduce((pv, cv) => pv+parseFloat(cv.amount), 0);
// 	    var totals = currentTrans.reduce(function(obj,transaction){
// 		  let key = transaction.budget_id + "";
// 		  obj[key] = (obj[key] || 0) + parseFloat(transaction.amount);
// 		  return obj;
// 		},{});
// 		budgets.forEach(function(budget){
// 		  let id = budget.id + "";
// 		  document.getElementById("budget"+id).style.width = (totals[id] || 0) / budget.amount * 100 + "%";
// 		  document.getElementById("budget"+id).innerText = parseInt((totals[id] || 0) / budget.amount * 100) + "%";
// 		});
// 		var budgetTotal = parseInt(document.getElementById("total").innerText);
// 		var totalProgress = document.getElementById("totalProgress");
// 		var budgetProgress = total / budgetTotal * 100;
// 		totalProgress.style.width = budgetProgress + "%"
// 		totalProgress.innerText = parseInt(budgetProgress) + "%"
// 		for(i = 0; i < events.length; i++) {
// 			checks.push(((events[i].end - events[i].start) / 1000 / 60 / 60) * events[i].pay_rate);
// 		};

// 		// rollover from previous month
// 		var prevstart = moment(start).subtract(1, "months");
// 		var prevend = moment(end).subtract(1, "months");
// 		if (  < start ){
// 			var prevchecks = []
// 			var prevevents = $("#calendar").fullCalendar('clientEvents', function(e){
// 				if(e.start >= prevstart && e.end <= prevend){
// 					return true;
// 				}
// 				return false;
// 			})
// 			for(i = 0; i < prevevents.length; i++) {
// 				prevchecks.push(((prevevents[i].end - prevevents[i].start) / 1000 / 60 / 60) * prevevents[i].pay_rate);
// 			};
// 			var prevMonthPay = prevchecks.reduce((pv, cv) => pv+cv, 0);
// 			var rollover = prevMonthPay - budgetTotal;
// 			console.log(rollover)
// 			console.log(checks)
// 			checks.push(rollover)
// 			console.log(checks)
// 		}
// 		// end rollover
// 		var monthPay = checks.reduce((pv, cv) => pv+cv, 0);
// 		var percentEarned = parseInt(monthPay / budgetTotal * 100);
// 		var progressBar = document.getElementById("earnedBudget");
// 		progressBar.setAttribute("aria-valuenow", percentEarned);
// 		progressBar.setAttribute("style", "width: " + percentEarned + "%");
// 		progressBar.innerText = percentEarned + "%";
// 		// // rollover from previous month
// 		// var prevstart = moment(start).subtract(1, "months");
// 		// var prevend = moment(end).subtract(1, "months");
// 		// var prevchecks = []
// 		// var prevevents = $("#calendar").fullCalendar('clientEvents', function(e){
// 		// 	if(e.start >= prevstart && e.end <= prevend){
// 		// 		return true;
// 		// 	}
// 		// 	return false;
// 		// })
// 		// for(i = 0; i < prevevents.length; i++) {
// 		// 	prevchecks.push(((prevevents[i].end - prevevents[i].start) / 1000 / 60 / 60) * prevevents[i].pay_rate);
// 		// };
// 		// var prevMonthPay = prevchecks.reduce((pv, cv) => pv+cv, 0);
// 		// var rollover = prevMonthPay - budgetTotal;
// 		// console.log(rollover)
// 		// console.log(checks)
// 		// checks.push(rollover)
// 		// console.log(checks)
// 	}, 100);
// }
// updatePage()
// })

	

// filter transactions by current month
// group totals by budget category
// re-draw each budget bar by the spending amounts over budget totals
