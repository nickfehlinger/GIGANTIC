<h2>Dashboard</h2>
<div class="container">
	<div class="row">
		<div class="col-md-6">
			<h3 id="calendarTitle">Calendar <span class="glyphicon glyphicon-plus-sign" id="newEventBtn" aria-hidden="true"></span></h3>
			<h4 id="employers"><span id="employershow"><span class="glyphicon glyphicon-briefcase"></span> Employers</span> <span class="glyphicon glyphicon-plus-sign" id="newEmployerBtn"></span></h4>
			<div id="newEvent">
				<%= render 'events/form', event: @event %>
			</div>
			<div id="employerlist">
			<h3>Employer Breakdown This Month</h3>
				<% @employers.each do |employer| %>
				<p><%=link_to employer_path(employer), method: :delete do %><span class="glyphicon glyphicon-remove deleteBtn" aria-hidden="true"></span><% end %><%= employer.name %> <span class="colordot" style="background-color: <%= employer.color %>;"></span></p>
				<% end %>
				<p>Inside: Hours | Outside: Pay</p>
				<canvas id="employerchart" width="400" height="400"></canvas>
			</div>
			<div id="newEmployer">
				<%= simple_form_for(@employer) do |f| %>
				  <%= f.error_notification %>

				  <div class="form-inputs">
				    <%= f.input :name, placeholder: 'Name', label: false %>
				    <%= f.input :contact_person, placeholder: 'Contact Person', label: false %>
				    <%= f.input :phone, placeholder: 'Phone Number', label: false %>
				    <%= f.input :email, placeholder: 'Email', label: false %>
				    <%= f.input :pay_rate, placeholder: 'Pay Rate', label: false %>
				    <%= f.input :pay_type, as: :select, prompt: 'Hourly?', label: false %>
				    <label for="employer[color]" class="colorinput">Pick a color to represent this employer:</label>
				    <input type="color" name="employer[color]" class="colorinput" value="#ff7700">
				  </div>

				  <div class="form-actions">
				    <%= f.button :submit %>
				  </div>
				<% end %>
			</div>
			<div id="calendar"></div>
			<p id="monthearnings"></p>
			<div class="progress">
			  <div id="earnedBudget" class="progress-bar" role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" style="width: 0%;">
			    0%
			  </div>
			</div>

	    </div>
		<div class="col-md-6">
			<div id="budgets">
			<h3>Budgets <span class="glyphicon glyphicon-plus-sign" aria-hidden="true" id="budgcatbtn"></span></h3>
			<div class="budgcatform">
			<%= render '/budget_categories/form', budget_category: @budget_category %>
			</div>
			<% @budget_categories.each do |budgetcat| %>
				<h4><%=link_to budget_category_path(budgetcat), method: :delete do %><span class="glyphicon glyphicon-remove deleteBtn" aria-hidden="true"></span><% end %><%= budgetcat.name %> <span class="glyphicon glyphicon-plus-sign" aria-hidden="true" id="budgetcat<%= budgetcat.id %>formBtn"></span></h4>
				<div id="budgetcat<%= budgetcat.id %>form" class="budgetforms">
				<%= simple_form_for(@budget) do |f| %>
				  <%= f.error_notification %>

				  <div class="form-inputs">
				    <%= f.input :name %>
				    <%= f.input :amount %>
				    <%= f.input :recurring_type %>
				    <%= f.association :budget_category, as: :hidden, input_html: {value: budgetcat.id} %>
				  </div>

				  <div class="form-actions">
				    <%= f.button :submit %>
				  </div>
				<% end %>
				</div>
				<script type="text/javascript">
					$("#budgetcat<%= budgetcat.id %>formBtn").click(function(){
						$("#budgetcat<%= budgetcat.id %>form").toggle(1000);
					});
				</script>
				<% budgetcat.budgets.each do |budget| %>
					<p><%=link_to budget_path(budget), method: :delete do %><span class="glyphicon glyphicon-remove deleteBtn" aria-hidden="true"></span><% end %><%= budget.name %> <span class="glyphicon glyphicon-plus-sign" aria-hidden="true" id="budget<%= budget.id %>formBtn"></span> <span class="glyphicon glyphicon-list" aria-hidden="true" id="budget<%= budget.id %>TransactionBtn"></span></p>
					<div class="transactionforms" id="budget<%= budget.id %>form">
					<%= simple_form_for(@transaction) do |f| %>
					  <%= f.error_notification %>

					  <div class="form-inputs">
					    <%= f.input :merchant %>
					    <%= f.input :note %>
					    <%= f.input :amount %>
					    <%= f.association :budget, as: :hidden, input_html: {value: budget.id} %>
					  </div>

					  <div class="form-actions">
					    <%= f.button :submit %>
					  </div>
					<% end %>
					</div>
					<div class="progress">
  						<div class="progress-bar" role="progressbar" aria-valuenow="<%= budget.percent %>" aria-valuemin="0" aria-valuemax="100" style="width: <%= budget.percent %>%" id="budget<%= budget.id %>" data-budget="<%= budget.amount %>">
  						<%= budget.percent %>%
  						</div>
					</div>
					<div id="budget<%= budget.id %>Transactions" class="transactions">
						<% budget.transactions.each do |transaction| %>
						<p data-toggle="tooltip" title="<%= transaction.note%>"><%=link_to transaction_path(transaction), method: :delete do %><span class="glyphicon glyphicon-remove deleteBtn" aria-hidden="true"></span><% end %><%= transaction.merchant %>: <%= transaction.amount %></p>
						<% end %>
					</div>
					<script type="text/javascript">
					$("#budget<%= budget.id %>formBtn").click(function(){
						$("#budget<%= budget.id %>form").toggle(1000);
					});
					$("#budget<%= budget.id %>TransactionBtn").click(function(){
						$("#budget<%= budget.id %>Transactions").toggle(1000);
					});
				</script>
				<% end %>
			<% end %>
			<script type="text/javascript">
				$("#budgcatbtn").click(function(e){
						$(".budgcatform").toggle(1000);
					});
				</script>
			<h4>Total</h4>
			<p id="total"><%= @budgets.sum(:amount) %></p>
			<div class="progress">
  				<div class="progress-bar" role="progressbar" aria-valuenow="<%= @total_percent %>" aria-valuemin="0" aria-valuemax="100" style="width: <%= @total_percent %>%" id="totalProgress">
  				<% if @total_percent %><%= @total_percent %>%<% end %>
  				</div>
			</div>
			</div>
		</div>
	</div>
</div>
<script type="text/javascript">
	document.addEventListener("DOMContentLoaded", function() {
	// initialize calendar
$('#calendar').fullCalendar({
		events: 'events.json',
		aspectRatio: 1
	});
$(document).ready(function(){
    $('[data-toggle="tooltip"]').tooltip(); 
});
// define transactions
var transactions;
$.ajax({
	url: '/transactions.json',
	success: function(data) {
		transactions = data;
	}
})
// define budgets
var budgets;
$.ajax({
	url: '/budgets.json',
	success: function(data) {
		budgets = data;
	}
})
var view,
	start,
	end;
App.getIdOrFilter = function () {
    view = $('#calendar').fullCalendar('getView');
    start = view.intervalStart;
    end   = view.intervalEnd;
    return function (e) {
        // this is our event filter
        if (e.start >= start && e.end <= end) {
            // event e is within the view interval
            return true;
        }
        // event e is not within the current displayed interval
        return false;
    };
}
$("#newEventBtn").click(function(){
	$("#newEvent").toggle(1000)
});
$("#newEmployerBtn").click(function(){
	$("#newEmployer").toggle(1000)
})
$("#employershow").click(function(){
	$("#employerlist").toggle(1000)
})

$(".fc-button").click(function(){
	updatePage()
});

function updatePage(){
	setTimeout( function(){
		var events = $('#calendar').fullCalendar('clientEvents', App.getIdOrFilter());
		console.log(events)
		var checks = []
		var currentTrans = transactions.filter(function (e) {
	        if (moment(e.created_at) >= start && moment(e.created_at) <= end) {
	            return true;
	        }
	        return false;
	    })
		var total = currentTrans.reduce((pv, cv) => pv+parseFloat(cv.amount), 0);
	    var totals = currentTrans.reduce(function(obj,transaction){
		  let key = transaction.budget_id + "";
		  obj[key] = (obj[key] || 0) + parseFloat(transaction.amount);
		  return obj;
		},{});
		budgets.forEach(function(budget){
		  let id = budget.id + "";
		  document.getElementById("budget"+id).style.width = (totals[id] || 0) / budget.amount * 100 + "%";
		  document.getElementById("budget"+id).innerText = parseInt((totals[id] || 0) / budget.amount * 100) + "%";
		});
		var budgetTotal = parseInt(document.getElementById("total").innerText);
		var totalProgress = document.getElementById("totalProgress");
		var budgetProgress = total / budgetTotal * 100;
		totalProgress.style.width = budgetProgress + "%"
		totalProgress.innerText = parseInt(budgetProgress) + "%"
		for(i = 0; i < events.length; i++) {
			checks.push(((events[i].end - events[i].start) / 1000 / 60 / 60) * events[i].pay_rate);
		};

		// rollover from previous month
		var prevstart = moment("<%= current_user.created_at %>");
		var prevend = moment(end).subtract(1, "months");
		if( prevstart < start ){
			var prevchecks = [];
			var prevevents = $("#calendar").fullCalendar('clientEvents', function(e){
				return e.start >= prevstart && e.end <= prevend;
			});
			for(i = 0; i < prevevents.length; i++) {
				prevchecks.push(((prevevents[i].end - prevevents[i].start) / 1000 / 60 / 60) * prevevents[i].pay_rate);
			};
			var prevMonthsPay = prevchecks.reduce((pv, cv) => pv+cv, 0);
			var rollover = prevMonthsPay - (budgetTotal * Math.ceil(prevend.diff(prevstart, 'months', true)));
			console.log(rollover)
			console.log(checks)
			checks.push(rollover)
			console.log(checks)
		}
		// end rollover
		var monthPay = checks.reduce((pv, cv) => pv+cv, 0);
		var percentEarned = parseInt(monthPay / budgetTotal * 100);
		var progressBar = document.getElementById("earnedBudget");
		progressBar.setAttribute("aria-valuenow", percentEarned);
		progressBar.setAttribute("style", "width: " + percentEarned + "%");
		progressBar.innerText = percentEarned + "%";
		// doughnut chart
		var curremps = events.map( o => o.employer ).filter( (v,i,a) => a.indexOf(v) === i );
		var currempchecks = [];
		var curremppay = [];
		var curremphours = [];
		var curremphourstot = [];
		var currempcolors = [];
			// get all the events for the employer	
			for(i = 0; i < curremps.length; i ++){
				var currempevents = events.filter(e => e.employer === curremps[i]);
				// calculate the checks for that employers events
				for( n = 0; n < currempevents.length; n ++ ){
					currempchecks.push(((currempevents[n].end - currempevents[n].start) / 1000 / 60 / 60) * currempevents[n].pay_rate);
					curremphours.push((currempevents[n].end - currempevents[n].start) / 1000 / 60 / 60)
					currempcolors.push(currempevents[n].color);
				};
				console.log(currempchecks);
				console.log(curremphours);
				// add them up and push them to curremppay
				curremppay.push(parseInt(currempchecks.reduce((pv, cv) => pv+cv, 0)));
				curremphourstot.push(parseInt(curremphours.reduce((pv, cv) => pv+cv, 0)));
				currempchecks = [];
				console.log(curremppay)
				console.log(curremphourstot)
			}
			currempcolors = currempcolors.filter( (v,i,a) => a.indexOf(v) === i );
			console.log(currempcolors)
		var ctx = $("#employerchart");
		var myChart = new Chart(ctx, {
		    type: 'doughnut',
		    data: {
		        labels: curremps,
		        datasets: [{
		            label: 'Pay Per Employer',
		            data: curremppay,
		            backgroundColor: currempcolors,
		            borderColor: '#444',
		            hoverBorderColor: '#ff7;',
		            borderWidth: 1
		        },{
		        	label: 'Hours Per Employer',
		            data: curremphourstot,
		            backgroundColor: currempcolors,
		            borderColor: '#444',
		            hoverBorderColor: '#ff7;',
		            borderWidth: 1
		        }]
		    },
		    options: {
		        legend: {
		        	display: false,
		        }
		    }
		});
	}, 100);
};
updatePage()
});
</script>